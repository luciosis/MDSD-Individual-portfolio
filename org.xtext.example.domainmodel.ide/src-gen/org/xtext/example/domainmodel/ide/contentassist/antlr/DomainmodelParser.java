/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.domainmodel.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.domainmodel.ide.contentassist.antlr.internal.InternalDomainmodelParser;
import org.xtext.example.domainmodel.services.DomainmodelGrammarAccess;

public class DomainmodelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DomainmodelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DomainmodelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAgentAccess().getAlternatives(), "rule__Agent__Alternatives");
			builder.put(grammarAccess.getSysvariableAccess().getValueAlternatives_0(), "rule__Sysvariable__ValueAlternatives_0");
			builder.put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
			builder.put(grammarAccess.getIntentAccess().getGroup(), "rule__Intent__Group__0");
			builder.put(grammarAccess.getIntentAccess().getGroup_2(), "rule__Intent__Group_2__0");
			builder.put(grammarAccess.getIsFollowUpAccess().getGroup(), "rule__IsFollowUp__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getTrainingAccess().getGroup(), "rule__Training__Group__0");
			builder.put(grammarAccess.getTrainingRefAccess().getGroup(), "rule__TrainingRef__Group__0");
			builder.put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
			builder.put(grammarAccess.getEntityExampleAccess().getGroup(), "rule__EntityExample__Group__0");
			builder.put(grammarAccess.getModelAccess().getAgentAssignment(), "rule__Model__AgentAssignment");
			builder.put(grammarAccess.getIntentAccess().getNameAssignment_1(), "rule__Intent__NameAssignment_1");
			builder.put(grammarAccess.getIntentAccess().getSuperTypeAssignment_2_1(), "rule__Intent__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getIntentAccess().getIsFollowUpAssignment_3(), "rule__Intent__IsFollowUpAssignment_3");
			builder.put(grammarAccess.getIntentAccess().getQuestionAssignment_4(), "rule__Intent__QuestionAssignment_4");
			builder.put(grammarAccess.getIntentAccess().getTrainingAssignment_5(), "rule__Intent__TrainingAssignment_5");
			builder.put(grammarAccess.getIsFollowUpAccess().getIntentAssignment_1(), "rule__IsFollowUp__IntentAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getExampleAssignment_3(), "rule__Entity__ExampleAssignment_3");
			builder.put(grammarAccess.getQuestionAccess().getQuestionEntityAssignment_0(), "rule__Question__QuestionEntityAssignment_0");
			builder.put(grammarAccess.getQuestionAccess().getPromptAssignment_2(), "rule__Question__PromptAssignment_2");
			builder.put(grammarAccess.getQuestionEntityAccess().getWithEntityAssignment(), "rule__QuestionEntity__WithEntityAssignment");
			builder.put(grammarAccess.getTrainingAccess().getTrainingrefAssignment_2(), "rule__Training__TrainingrefAssignment_2");
			builder.put(grammarAccess.getTrainingRefAccess().getPhraseAssignment_0(), "rule__TrainingRef__PhraseAssignment_0");
			builder.put(grammarAccess.getTrainingRefAccess().getDeclarationAssignment_1(), "rule__TrainingRef__DeclarationAssignment_1");
			builder.put(grammarAccess.getDeclarationAccess().getTrainingstringAssignment_1(), "rule__Declaration__TrainingstringAssignment_1");
			builder.put(grammarAccess.getDeclarationAccess().getReferenceAssignment_3(), "rule__Declaration__ReferenceAssignment_3");
			builder.put(grammarAccess.getEntityExampleAccess().getNameAssignment_0(), "rule__EntityExample__NameAssignment_0");
			builder.put(grammarAccess.getSysvariableAccess().getValueAssignment(), "rule__Sysvariable__ValueAssignment");
			builder.put(grammarAccess.getReferenceAccess().getEntityAssignment_0(), "rule__Reference__EntityAssignment_0");
			builder.put(grammarAccess.getReferenceAccess().getSysvarAssignment_1(), "rule__Reference__SysvarAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DomainmodelGrammarAccess grammarAccess;

	@Override
	protected InternalDomainmodelParser createParser() {
		InternalDomainmodelParser result = new InternalDomainmodelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DomainmodelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DomainmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
