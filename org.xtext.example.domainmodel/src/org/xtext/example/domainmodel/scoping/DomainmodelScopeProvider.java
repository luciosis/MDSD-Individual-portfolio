/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.domainmodel.scoping;

import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.xtext.example.domainmodel.domainmodel.DomainmodelPackage;
import org.xtext.example.domainmodel.domainmodel.Intent;

import com.google.common.base.Objects;


/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class DomainmodelScopeProvider extends AbstractDomainmodelScopeProvider {
	@Override
	public IScope getScope(EObject context, EReference reference){
		if (context instanceof Intent && reference == DomainmodelPackage.Literals.INTENT__SUPER_TYPE) {
			EObject rootIntent = EcoreUtil2.getRootContainer(context);
			List<Intent> candidates = EcoreUtil2.getAllContentsOfType(rootIntent, Intent.class);
			IScope scopeExists = Scopes.scopeFor(candidates);
			return new FilteringScope(scopeExists,(e) -> !Objects.equal(e.getEObjectOrProxy(), context));		
		}
		return super.getScope(context, reference);
	}
	
}