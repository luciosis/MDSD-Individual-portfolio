/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.domainmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.domainmodel.domainmodel.Entity
import org.xtext.example.domainmodel.domainmodel.Intent
import org.xtext.example.domainmodel.domainmodel.Reference
import org.xtext.example.domainmodel.domainmodel.Training
import org.xtext.example.domainmodel.domainmodel.Question
import java.util.List
import java.util.Set
import java.util.HashSet
import java.util.Iterator
import org.xtext.example.domainmodel.domainmodel.TrainingRef
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DomainmodelGenerator extends AbstractGenerator {
	var Set<FollowUpIntent> followUpInformation

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		followUpInformation = resource.allContents.filter(Intent).collectFollowUp
		resource.allContents.filter(Entity).forEach[generateEntityFile(fsa)]
		followUpInformation.forEach[generateIntentFile(fsa)]	
	}

	def generateEntityFile(Entity entity, IFileSystemAccess2 fsa) {
		fsa.generateFile(entity.name + "_entries_en.json",entity.generateEntityEntries)
		fsa.generateFile(entity.name + ".json", entity.generateEntity)
	}

	def generateIntentFile(FollowUpIntent intent, IFileSystemAccess2 fsa) {
		fsa.generateFile(intent.name + ".json", intent.generateIntent)
	}

	def CharSequence generateIntent(FollowUpIntent intent)
		'''
		{
		"id": "«36.generateId»",
		"name": "«intent.name»",
		"auto": true,
		«intent.generateFollowUp»
			"parameters": [
		«FOR parameters: intent.createQuestionList»
		{ 
		          "id": "«36.generateId»",
		          "required": "true",
		          "dataType": «parameters.questionEntity.withEntity.getEntityType»",
		          "name": "«parameters.questionEntity.withEntity.getEntityType»",
		          "value": "$«parameters.questionEntity.withEntity.getEntityType»",
		          "prompts": [
		            {
		              "lang": "en",
		              "value": "«parameters.prompt»"
		            }
		          ],
		          "promptMessages": [],
		          "noMatchPromptMessages": [],
		          "noInputPromptMessages": [],
		          "outputDialogContexts": [],
		          "isList": false
		        } «if (parameters != intent.question.last && intent.superIntent === null) ''','''»
		«ENDFOR»
		],
		      "messages": [
		        {
		          "type": "message",
		          "lang": "en",
		          "condition": "",
		          "speech": []
		        }
		      ],
		      "defaultResponsePlatforms": {},
		      "speech": []
		    }
		  ],
		  "priority": 500000,
		  "webhookUsed": true,
		  "webhookForSlotFilling": false,
		  "fallbackIntent": false,
		  "events": [],
		  "conditionalResponses": [],
		  "condition": "",
		  "conditionalFollowupEvents": []
		  "userSays": [
		  «FOR training: intent.createTrainingList»
		  {
		        "isTemplate": false,
		        "data": [
		          { 
		            "text": "«training.phrase» ",
		            "userDefined": false
		          },
		          {
		            "text": "«training.declaration.trainingstring»",
		            "userDefined": false,
		            "alias": "«training.declaration.reference.sysvar!==null?training.declaration.reference.sysvar.value:training.declaration.reference.entity.name»",
		            "meta": "@«training.declaration.reference.entityType»"
		          }
		        ],
		        "count": 0,
		        "id": "«36.generateId»",
		        "updated": null
		      } «if (training != intent.training.trainingref.last) ''','''»
		  «ENDFOR»
		]
		'''

	def generateFollowUp(FollowUpIntent intent)
	'''
	"contexts": [
	«if (intent.followUpTo !== null)'''"«intent.followUpTo.name»-followup"'''»
	],
	"responses": [
	{
	"resetContexts": false,
	"affectedContexts":[
	«if (intent.followUpTo === null)
	'''{
	"name": "«intent.followUpFrom.name»-followup",
	"parameters": {},
	"lifespan": 2
	}'''»
	],
	"action": "",
	'''
	
	def List<Question> createQuestionList(FollowUpIntent intent){
		val result = new ArrayList<Question>
		result.addAll(intent.question)
		if(intent.superIntent !== null){
			result.addAll(intent.superIntent.question)
		}
		result
	}
	
	def List<TrainingRef> createTrainingList(FollowUpIntent intent){
		val result = new ArrayList<TrainingRef>
		result.addAll(intent.training.trainingref)
		if(intent.superIntent !== null){
			result.addAll(intent.superIntent.training.trainingref)
		}
		result
	}
	
	def Set<FollowUpIntent> collectFollowUp(Iterator<Intent> intents){
		val result = new HashSet<FollowUpIntent>
		intents.forEach[item | 
			result.add(new FollowUpIntent(item.name, item.superType, item.isFollowUp !== null ? item.isFollowUp.intent: null, item, item.question, item.training))
		]
		result
	}
	
	@Data
	static class FollowUpIntent{
		String name
		Intent superIntent
		Intent followUpTo
		Intent followUpFrom
		List<Question> question
		Training training
	}
	
	def String getEntityType(Reference ref) {
		if (ref.entity !== null)
			ref.entity.name
		else if (ref.sysvar !== null)
			"sys." + ref.sysvar.value
	}
	
	def CharSequence generateEntityEntries(Entity entity) '''
	[
	«FOR example: entity.example»
	  {
	    "value": "«example.name»",
	    "synonyms": [
	      ""
	    ]
	  }«if (example != entity.example.last)''','''»
	«ENDFOR»
	]
	'''
	
	def CharSequence generateEntity(Entity entity) '''
	{
	  "id": "«36.generateId»",
	  "name": "«entity.name»",
	  "isOverridable": true,
	  "isEnum": false,
	  "isRegexp": false,
	  "automatedExpansion": false,
	  "allowFuzzyExtraction": true
	}
	'''
	
	val ALPHA_NUMERIC_STRING = "abcdefghijklmnopqrstuvxyz0123456789-"
	
	def String generateId(int count) {
		var c = count
    	var id = ""
    	while (c-- != 0) {
        	val character = (Math.random() * ALPHA_NUMERIC_STRING.length).intValue
        	id += (ALPHA_NUMERIC_STRING.charAt(character))
    }
   		id
	}
}