/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.domainmodel.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.lib.Data;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.Pure;
import org.eclipse.xtext.xbase.lib.util.ToStringHelper;
import org.xtext.example.domainmodel.domainmodel.Entity;
import org.xtext.example.domainmodel.domainmodel.EntityExample;
import org.xtext.example.domainmodel.domainmodel.Intent;
import org.xtext.example.domainmodel.domainmodel.IsFollowUp;
import org.xtext.example.domainmodel.domainmodel.Question;
import org.xtext.example.domainmodel.domainmodel.Reference;
import org.xtext.example.domainmodel.domainmodel.Sysvariable;
import org.xtext.example.domainmodel.domainmodel.Training;
import org.xtext.example.domainmodel.domainmodel.TrainingRef;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DomainmodelGenerator extends AbstractGenerator {
  @Data
  public static class FollowUpIntent {
    private final String _name;
    
    private final Intent _superIntent;
    
    private final Intent _followUpTo;
    
    private final Intent _followUpFrom;
    
    private final List<Question> _question;
    
    private final Training _training;
    
    public FollowUpIntent(final String name, final Intent superIntent, final Intent followUpTo, final Intent followUpFrom, final List<Question> question, final Training training) {
      super();
      this._name = name;
      this._superIntent = superIntent;
      this._followUpTo = followUpTo;
      this._followUpFrom = followUpFrom;
      this._question = question;
      this._training = training;
    }
    
    @Override
    @Pure
    public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result + ((this._name== null) ? 0 : this._name.hashCode());
      result = prime * result + ((this._superIntent== null) ? 0 : this._superIntent.hashCode());
      result = prime * result + ((this._followUpTo== null) ? 0 : this._followUpTo.hashCode());
      result = prime * result + ((this._followUpFrom== null) ? 0 : this._followUpFrom.hashCode());
      result = prime * result + ((this._question== null) ? 0 : this._question.hashCode());
      return prime * result + ((this._training== null) ? 0 : this._training.hashCode());
    }
    
    @Override
    @Pure
    public boolean equals(final Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      DomainmodelGenerator.FollowUpIntent other = (DomainmodelGenerator.FollowUpIntent) obj;
      if (this._name == null) {
        if (other._name != null)
          return false;
      } else if (!this._name.equals(other._name))
        return false;
      if (this._superIntent == null) {
        if (other._superIntent != null)
          return false;
      } else if (!this._superIntent.equals(other._superIntent))
        return false;
      if (this._followUpTo == null) {
        if (other._followUpTo != null)
          return false;
      } else if (!this._followUpTo.equals(other._followUpTo))
        return false;
      if (this._followUpFrom == null) {
        if (other._followUpFrom != null)
          return false;
      } else if (!this._followUpFrom.equals(other._followUpFrom))
        return false;
      if (this._question == null) {
        if (other._question != null)
          return false;
      } else if (!this._question.equals(other._question))
        return false;
      if (this._training == null) {
        if (other._training != null)
          return false;
      } else if (!this._training.equals(other._training))
        return false;
      return true;
    }
    
    @Override
    @Pure
    public String toString() {
      String result = new ToStringHelper().toString(this);
      return result;
    }
    
    @Pure
    public String getName() {
      return this._name;
    }
    
    @Pure
    public Intent getSuperIntent() {
      return this._superIntent;
    }
    
    @Pure
    public Intent getFollowUpTo() {
      return this._followUpTo;
    }
    
    @Pure
    public Intent getFollowUpFrom() {
      return this._followUpFrom;
    }
    
    @Pure
    public List<Question> getQuestion() {
      return this._question;
    }
    
    @Pure
    public Training getTraining() {
      return this._training;
    }
  }
  
  private Set<DomainmodelGenerator.FollowUpIntent> followUpInformation;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.followUpInformation = this.collectFollowUp(Iterators.<Intent>filter(resource.getAllContents(), Intent.class));
    final Procedure1<Entity> _function = (Entity it) -> {
      this.generateEntityFile(it, fsa);
    };
    IteratorExtensions.<Entity>forEach(Iterators.<Entity>filter(resource.getAllContents(), Entity.class), _function);
    final Consumer<DomainmodelGenerator.FollowUpIntent> _function_1 = (DomainmodelGenerator.FollowUpIntent it) -> {
      this.generateIntentFile(it, fsa);
    };
    this.followUpInformation.forEach(_function_1);
  }
  
  public void generateEntityFile(final Entity entity, final IFileSystemAccess2 fsa) {
    String _name = entity.getName();
    String _plus = (_name + "_entries_en.json");
    fsa.generateFile(_plus, this.generateEntityEntries(entity));
    String _name_1 = entity.getName();
    String _plus_1 = (_name_1 + ".json");
    fsa.generateFile(_plus_1, this.generateEntity(entity));
  }
  
  public void generateIntentFile(final DomainmodelGenerator.FollowUpIntent intent, final IFileSystemAccess2 fsa) {
    String _name = intent.getName();
    String _plus = (_name + ".json");
    fsa.generateFile(_plus, this.generateIntent(intent));
  }
  
  public CharSequence generateIntent(final DomainmodelGenerator.FollowUpIntent intent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\"id\": \"");
    String _generateId = this.generateId(36);
    _builder.append(_generateId);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"name\": \"");
    String _name = intent.getName();
    _builder.append(_name);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"auto\": true,");
    _builder.newLine();
    CharSequence _generateFollowUp = this.generateFollowUp(intent);
    _builder.append(_generateFollowUp);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("\"parameters\": [");
    _builder.newLine();
    {
      List<Question> _createQuestionList = this.createQuestionList(intent);
      for(final Question parameters : _createQuestionList) {
        _builder.append("{ ");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"id\": \"");
        String _generateId_1 = this.generateId(36);
        _builder.append(_generateId_1, "          ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"required\": \"true\",");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"dataType\": ");
        String _entityType = this.getEntityType(parameters.getQuestionEntity().getWithEntity());
        _builder.append(_entityType, "          ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"name\": \"");
        String _entityType_1 = this.getEntityType(parameters.getQuestionEntity().getWithEntity());
        _builder.append(_entityType_1, "          ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"value\": \"$");
        String _entityType_2 = this.getEntityType(parameters.getQuestionEntity().getWithEntity());
        _builder.append(_entityType_2, "          ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"prompts\": [");
        _builder.newLine();
        _builder.append("            ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("              ");
        _builder.append("\"lang\": \"en\",");
        _builder.newLine();
        _builder.append("              ");
        _builder.append("\"value\": \"");
        String _prompt = parameters.getPrompt();
        _builder.append(_prompt, "              ");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"promptMessages\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"noMatchPromptMessages\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"noInputPromptMessages\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"outputDialogContexts\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"isList\": false");
        _builder.newLine();
        _builder.append("        ");
        _builder.append("} ");
        CharSequence _xifexpression = null;
        if (((!Objects.equal(parameters, IterableExtensions.<Question>last(intent.getQuestion()))) && (intent.getSuperIntent() == null))) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(",");
          _xifexpression = _builder_1;
        }
        _builder.append(_xifexpression, "        ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("],");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"messages\": [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"type\": \"message\",");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"lang\": \"en\",");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"condition\": \"\",");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"speech\": []");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"defaultResponsePlatforms\": {},");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"speech\": []");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"priority\": 500000,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"webhookUsed\": true,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"webhookForSlotFilling\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"fallbackIntent\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"events\": [],");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"conditionalResponses\": [],");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"condition\": \"\",");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"conditionalFollowupEvents\": []");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"userSays\": [");
    _builder.newLine();
    {
      List<TrainingRef> _createTrainingList = this.createTrainingList(intent);
      for(final TrainingRef training : _createTrainingList) {
        _builder.append("  ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("      ");
        _builder.append("\"isTemplate\": false,");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("      ");
        _builder.append("\"data\": [");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("        ");
        _builder.append("{ ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("          ");
        _builder.append("\"text\": \"");
        String _phrase = training.getPhrase();
        _builder.append(_phrase, "            ");
        _builder.append(" \",");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("          ");
        _builder.append("\"userDefined\": false");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("        ");
        _builder.append("},");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("        ");
        _builder.append("{");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("          ");
        _builder.append("\"text\": \"");
        String _trainingstring = training.getDeclaration().getTrainingstring();
        _builder.append(_trainingstring, "            ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("          ");
        _builder.append("\"userDefined\": false,");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("          ");
        _builder.append("\"alias\": \"");
        String _xifexpression_1 = null;
        Sysvariable _sysvar = training.getDeclaration().getReference().getSysvar();
        boolean _tripleNotEquals = (_sysvar != null);
        if (_tripleNotEquals) {
          _xifexpression_1 = training.getDeclaration().getReference().getSysvar().getValue();
        } else {
          _xifexpression_1 = training.getDeclaration().getReference().getEntity().getName();
        }
        _builder.append(_xifexpression_1, "            ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("          ");
        _builder.append("\"meta\": \"@");
        String _entityType_3 = this.getEntityType(training.getDeclaration().getReference());
        _builder.append(_entityType_3, "            ");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("      ");
        _builder.append("],");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("      ");
        _builder.append("\"count\": 0,");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("      ");
        _builder.append("\"id\": \"");
        String _generateId_2 = this.generateId(36);
        _builder.append(_generateId_2, "        ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("      ");
        _builder.append("\"updated\": null");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("    ");
        _builder.append("} ");
        CharSequence _xifexpression_2 = null;
        TrainingRef _last = IterableExtensions.<TrainingRef>last(intent.getTraining().getTrainingref());
        boolean _notEquals = (!Objects.equal(training, _last));
        if (_notEquals) {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append(",");
          _xifexpression_2 = _builder_2;
        }
        _builder.append(_xifexpression_2, "      ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("]");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateFollowUp(final DomainmodelGenerator.FollowUpIntent intent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"contexts\": [");
    _builder.newLine();
    CharSequence _xifexpression = null;
    Intent _followUpTo = intent.getFollowUpTo();
    boolean _tripleNotEquals = (_followUpTo != null);
    if (_tripleNotEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\"");
      String _name = intent.getFollowUpTo().getName();
      _builder_1.append(_name);
      _builder_1.append("-followup\"");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    _builder.newLineIfNotEmpty();
    _builder.append("],");
    _builder.newLine();
    _builder.append("\"responses\": [");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\"resetContexts\": false,");
    _builder.newLine();
    _builder.append("\"affectedContexts\":[");
    _builder.newLine();
    CharSequence _xifexpression_1 = null;
    Intent _followUpTo_1 = intent.getFollowUpTo();
    boolean _tripleEquals = (_followUpTo_1 == null);
    if (_tripleEquals) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("{");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("\"name\": \"");
      String _name_1 = intent.getFollowUpFrom().getName();
      _builder_2.append(_name_1, "\t");
      _builder_2.append("-followup\",");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("\t");
      _builder_2.append("\"parameters\": {},");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("\"lifespan\": 2");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _xifexpression_1 = _builder_2;
    }
    _builder.append(_xifexpression_1);
    _builder.newLineIfNotEmpty();
    _builder.append("],");
    _builder.newLine();
    _builder.append("\"action\": \"\",");
    _builder.newLine();
    return _builder;
  }
  
  public List<Question> createQuestionList(final DomainmodelGenerator.FollowUpIntent intent) {
    ArrayList<Question> _xblockexpression = null;
    {
      final ArrayList<Question> result = new ArrayList<Question>();
      result.addAll(intent.getQuestion());
      Intent _superIntent = intent.getSuperIntent();
      boolean _tripleNotEquals = (_superIntent != null);
      if (_tripleNotEquals) {
        result.addAll(intent.getSuperIntent().getQuestion());
      }
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  public List<TrainingRef> createTrainingList(final DomainmodelGenerator.FollowUpIntent intent) {
    ArrayList<TrainingRef> _xblockexpression = null;
    {
      final ArrayList<TrainingRef> result = new ArrayList<TrainingRef>();
      result.addAll(intent.getTraining().getTrainingref());
      Intent _superIntent = intent.getSuperIntent();
      boolean _tripleNotEquals = (_superIntent != null);
      if (_tripleNotEquals) {
        result.addAll(intent.getSuperIntent().getTraining().getTrainingref());
      }
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  public Set<DomainmodelGenerator.FollowUpIntent> collectFollowUp(final Iterator<Intent> intents) {
    HashSet<DomainmodelGenerator.FollowUpIntent> _xblockexpression = null;
    {
      final HashSet<DomainmodelGenerator.FollowUpIntent> result = new HashSet<DomainmodelGenerator.FollowUpIntent>();
      final Procedure1<Intent> _function = (Intent item) -> {
        String _name = item.getName();
        Intent _superType = item.getSuperType();
        Intent _xifexpression = null;
        IsFollowUp _isFollowUp = item.getIsFollowUp();
        boolean _tripleNotEquals = (_isFollowUp != null);
        if (_tripleNotEquals) {
          _xifexpression = item.getIsFollowUp().getIntent();
        } else {
          _xifexpression = null;
        }
        EList<Question> _question = item.getQuestion();
        Training _training = item.getTraining();
        DomainmodelGenerator.FollowUpIntent _followUpIntent = new DomainmodelGenerator.FollowUpIntent(_name, _superType, _xifexpression, item, _question, _training);
        result.add(_followUpIntent);
      };
      IteratorExtensions.<Intent>forEach(intents, _function);
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  public String getEntityType(final Reference ref) {
    String _xifexpression = null;
    Entity _entity = ref.getEntity();
    boolean _tripleNotEquals = (_entity != null);
    if (_tripleNotEquals) {
      _xifexpression = ref.getEntity().getName();
    } else {
      String _xifexpression_1 = null;
      Sysvariable _sysvar = ref.getSysvar();
      boolean _tripleNotEquals_1 = (_sysvar != null);
      if (_tripleNotEquals_1) {
        String _value = ref.getSysvar().getValue();
        _xifexpression_1 = ("sys." + _value);
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence generateEntityEntries(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    _builder.newLine();
    {
      EList<EntityExample> _example = entity.getExample();
      for(final EntityExample example : _example) {
        _builder.append("{");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("\"value\": \"");
        String _name = example.getName();
        _builder.append(_name, "  ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("\"synonyms\": [");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"\"");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("]");
        _builder.newLine();
        _builder.append("}");
        CharSequence _xifexpression = null;
        EntityExample _last = IterableExtensions.<EntityExample>last(entity.getExample());
        boolean _notEquals = (!Objects.equal(example, _last));
        if (_notEquals) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(",");
          _xifexpression = _builder_1;
        }
        _builder.append(_xifexpression);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("]");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntity(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"id\": \"");
    String _generateId = this.generateId(36);
    _builder.append(_generateId, "  ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("\"name\": \"");
    String _name = entity.getName();
    _builder.append(_name, "  ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("\"isOverridable\": true,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"isEnum\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"isRegexp\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"automatedExpansion\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"allowFuzzyExtraction\": true");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private final String ALPHA_NUMERIC_STRING = "abcdefghijklmnopqrstuvxyz0123456789-";
  
  public String generateId(final int count) {
    String _xblockexpression = null;
    {
      int c = count;
      String id = "";
      while ((c-- != 0)) {
        {
          double _random = Math.random();
          int _length = this.ALPHA_NUMERIC_STRING.length();
          final int character = Double.valueOf((_random * _length)).intValue();
          String _id = id;
          char _charAt = this.ALPHA_NUMERIC_STRING.charAt(character);
          id = (_id + Character.valueOf(_charAt));
        }
      }
      _xblockexpression = id;
    }
    return _xblockexpression;
  }
}
